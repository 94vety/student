{"ast":null,"code":"function ajax(options) {\n  //存储的是默认值\n  var defaults = {\n    type: 'get',\n    url: '',\n    data: {},\n    header: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    success: function () {},\n    error: function () {}\n  }; //使用options 对象中的属性覆盖defaults对象中的属性\n\n  Object.assign(defaults, options); //创建ajax对象\n\n  var xhr = new XMLHttpRequest(); //拼接请求参数变量\n\n  var params = ''; //循环用户传递进来的对象格式参数\n\n  for (var attr in defaults.data) {\n    //将参数拼接成字符串格式\n    params += attr + '=' + defaults.data[attr] + '&';\n  } //将参数后面的&符截取掉\n\n\n  params = params.substr(0, params.length - 1); //判断请求方式\n\n  if (defaults.type == 'get') {\n    defaults.url = defaults.url + '?' + params;\n  } //配置ajax对象\n\n\n  xhr.open(defaults.type, defaults.url); //如果请求参数为post\n\n  if (defaults.type == 'post') {\n    var contentType = defaults.header['Content-Type']; //设置请求参数格式的类型(post请求必须设置)\n\n    xhr.setRequestHeader('Content-Type', contentType);\n\n    if (contentType == 'application/json') {\n      xhr.send(JSON.stringify(defaults.data));\n    } else {\n      xhr.send(params);\n    }\n  } else {\n    //发送请求\n    xhr.send();\n  } //监听xhr对象下面的onload事件\n  //当xhr对象接收完响应数据后触发\n\n\n  xhr.onload = function () {\n    //用来获取响应头中的数据\n    // xhr.getResponseHeader()\n    var ContentType = xhr.getResponseHeader('Content-Type'); //服务器端返回的数据\n\n    var responseText = xhr.responseText; //如果响应类型中包含'application/json'\n\n    if (ContentType.includes('application/json')) {\n      //将JSON字符串转换为JSON对象\n      responseText = JSON.parse(responseText);\n    } //对http状态码进行判断\n\n\n    if (xhr.status == 200) {\n      defaults.success(responseText, xhr);\n    } else {\n      defaults.error(responseText, xhr);\n    }\n  };\n}\n\nexport default ajax;","map":{"version":3,"sources":["/Users/wuliangrui/Desktop/库里泡/item/student/src/utils/ajax.js"],"names":["ajax","options","defaults","type","url","data","header","success","error","Object","assign","xhr","XMLHttpRequest","params","attr","substr","length","open","contentType","setRequestHeader","send","JSON","stringify","onload","ContentType","getResponseHeader","responseText","includes","parse","status"],"mappings":"AAAA,SAASA,IAAT,CAAcC,OAAd,EAAuB;AACnB;AACA,MAAIC,QAAQ,GAAG;AACPC,IAAAA,IAAI,EAAE,KADC;AAEPC,IAAAA,GAAG,EAAE,EAFE;AAGPC,IAAAA,IAAI,EAAE,EAHC;AAIPC,IAAAA,MAAM,EAAE;AACJ,sBAAgB;AADZ,KAJD;AAOPC,IAAAA,OAAO,EAAE,YAAW,CAAE,CAPf;AAQPC,IAAAA,KAAK,EAAE,YAAW,CAAE;AARb,GAAf,CAFmB,CAYf;;AACJC,EAAAA,MAAM,CAACC,MAAP,CAAcR,QAAd,EAAwBD,OAAxB,EAbmB,CAenB;;AACA,MAAIU,GAAG,GAAG,IAAIC,cAAJ,EAAV,CAhBmB,CAiBnB;;AACA,MAAIC,MAAM,GAAG,EAAb,CAlBmB,CAmBnB;;AACA,OAAK,IAAIC,IAAT,IAAiBZ,QAAQ,CAACG,IAA1B,EAAgC;AAC5B;AACAQ,IAAAA,MAAM,IAAIC,IAAI,GAAG,GAAP,GAAaZ,QAAQ,CAACG,IAAT,CAAcS,IAAd,CAAb,GAAmC,GAA7C;AACH,GAvBkB,CAwBnB;;;AACAD,EAAAA,MAAM,GAAGA,MAAM,CAACE,MAAP,CAAc,CAAd,EAAiBF,MAAM,CAACG,MAAP,GAAgB,CAAjC,CAAT,CAzBmB,CA0Bf;;AACJ,MAAId,QAAQ,CAACC,IAAT,IAAiB,KAArB,EAA4B;AACxBD,IAAAA,QAAQ,CAACE,GAAT,GAAeF,QAAQ,CAACE,GAAT,GAAe,GAAf,GAAqBS,MAApC;AACH,GA7BkB,CA+BnB;;;AACAF,EAAAA,GAAG,CAACM,IAAJ,CAASf,QAAQ,CAACC,IAAlB,EAAwBD,QAAQ,CAACE,GAAjC,EAhCmB,CAiCnB;;AACA,MAAIF,QAAQ,CAACC,IAAT,IAAiB,MAArB,EAA6B;AACzB,QAAIe,WAAW,GAAGhB,QAAQ,CAACI,MAAT,CAAgB,cAAhB,CAAlB,CADyB,CAEzB;;AACAK,IAAAA,GAAG,CAACQ,gBAAJ,CAAqB,cAArB,EAAqCD,WAArC;;AACA,QAAIA,WAAW,IAAI,kBAAnB,EAAuC;AACnCP,MAAAA,GAAG,CAACS,IAAJ,CAASC,IAAI,CAACC,SAAL,CAAepB,QAAQ,CAACG,IAAxB,CAAT;AACH,KAFD,MAEO;AACHM,MAAAA,GAAG,CAACS,IAAJ,CAASP,MAAT;AACH;AAEJ,GAVD,MAUO;AACH;AACAF,IAAAA,GAAG,CAACS,IAAJ;AACH,GA/CkB,CAiDnB;AACA;;;AACAT,EAAAA,GAAG,CAACY,MAAJ,GAAa,YAAW;AAGpB;AACA;AACA,QAAIC,WAAW,GAAGb,GAAG,CAACc,iBAAJ,CAAsB,cAAtB,CAAlB,CALoB,CAMpB;;AACA,QAAIC,YAAY,GAAGf,GAAG,CAACe,YAAvB,CAPoB,CAQpB;;AACA,QAAIF,WAAW,CAACG,QAAZ,CAAqB,kBAArB,CAAJ,EAA8C;AAC1C;AACAD,MAAAA,YAAY,GAAGL,IAAI,CAACO,KAAL,CAAWF,YAAX,CAAf;AAEH,KAbmB,CAcpB;;;AACA,QAAIf,GAAG,CAACkB,MAAJ,IAAc,GAAlB,EAAuB;AACnB3B,MAAAA,QAAQ,CAACK,OAAT,CAAiBmB,YAAjB,EAA+Bf,GAA/B;AACH,KAFD,MAEO;AACHT,MAAAA,QAAQ,CAACM,KAAT,CAAekB,YAAf,EAA6Bf,GAA7B;AACH;AAGJ,GAtBD;AAuBH;;AAED,eAAeX,IAAf","sourcesContent":["function ajax(options) {\n    //存储的是默认值\n    var defaults = {\n            type: 'get',\n            url: '',\n            data: {},\n            header: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            success: function() {},\n            error: function() {}\n        }\n        //使用options 对象中的属性覆盖defaults对象中的属性\n    Object.assign(defaults, options);\n\n    //创建ajax对象\n    var xhr = new XMLHttpRequest();\n    //拼接请求参数变量\n    var params = '';\n    //循环用户传递进来的对象格式参数\n    for (var attr in defaults.data) {\n        //将参数拼接成字符串格式\n        params += attr + '=' + defaults.data[attr] + '&';\n    }\n    //将参数后面的&符截取掉\n    params = params.substr(0, params.length - 1)\n        //判断请求方式\n    if (defaults.type == 'get') {\n        defaults.url = defaults.url + '?' + params;\n    }\n\n    //配置ajax对象\n    xhr.open(defaults.type, defaults.url);\n    //如果请求参数为post\n    if (defaults.type == 'post') {\n        var contentType = defaults.header['Content-Type'];\n        //设置请求参数格式的类型(post请求必须设置)\n        xhr.setRequestHeader('Content-Type', contentType);\n        if (contentType == 'application/json') {\n            xhr.send(JSON.stringify(defaults.data))\n        } else {\n            xhr.send(params);\n        }\n\n    } else {\n        //发送请求\n        xhr.send();\n    }\n\n    //监听xhr对象下面的onload事件\n    //当xhr对象接收完响应数据后触发\n    xhr.onload = function() {\n\n\n        //用来获取响应头中的数据\n        // xhr.getResponseHeader()\n        var ContentType = xhr.getResponseHeader('Content-Type');\n        //服务器端返回的数据\n        var responseText = xhr.responseText;\n        //如果响应类型中包含'application/json'\n        if (ContentType.includes('application/json')) {\n            //将JSON字符串转换为JSON对象\n            responseText = JSON.parse(responseText)\n\n        }\n        //对http状态码进行判断\n        if (xhr.status == 200) {\n            defaults.success(responseText, xhr);\n        } else {\n            defaults.error(responseText, xhr)\n        }\n\n\n    }\n}\n\nexport default ajax;\n"]},"metadata":{},"sourceType":"module"}