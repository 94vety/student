{"ast":null,"code":"import axios from 'axios';\nimport { message } from 'antd';\nexport const request = createAxiosInstance();\n\nfunction createAxiosInstance() {\n  const instance = axios.create({\n    baseURL: \"http://82.156.102.187:8001\",\n    timeout: 5000,\n    headers: {\n      // 可定义统一的请求头部\n      post: {\n        'Content-Type': 'application/json'\n      }\n    }\n  }); // 添加请求拦截器(在发送请求之前做些什么)\n\n  instance.interceptors.request.use(config => {\n    //可添加开启loading效果的函数\n    loading.open(); //token 存在就添加到请求头里\n\n    token && (config.headers.Authorization = token); // 过滤请求参数中的 null undefined ''的函数\n\n    cleanObject();\n    return config;\n  }); // 添加响应拦截器(对响应数据做点什么)\n\n  instance.interceptors.response.use(response => {\n    //可添加关闭loading效果的函数\n    loading.close(); //解构出返回结果的数据\n\n    const res = response.data; //对自定义code码进行判断,将成功的数据返回出去\n\n    const validateStatus = /^(2|3)\\d{2}$/; //code为2或3开头的视作请求成功\n\n    if (validateStatus.test(res.code)) {\n      return res.data;\n    } //判断失败的code码并作出提示等操作\n\n\n    if (res.code === 401) {\n      message.error(res.msg);\n    } else {\n      message.warning(res.msg);\n    }\n\n    return Promise.reject(res);\n  }, error => {\n    loading.close(); //可添加关闭loading效果的函数\n\n    if (error.response.status === 401) {\n      message.error('token失效，请重新登录！');\n      removeStorageToken();\n      setTimeout(() => {\n        window.location.href = '/login';\n      }, 2000);\n    } else {\n      if (!window.navigator.onLine) {\n        message.warning('网络异常，请检查网络是否正常连接');\n      } else if (error.code === 'ECONNABORTED') {\n        message.warning('请求超时');\n      } else {\n        message.warning('服务器异常，请联系管理员');\n      }\n    }\n\n    return Promise.reject(error); // 将错误继续返回给到具体页面\n  });\n  return instance;\n}","map":{"version":3,"sources":["/Users/wuliangrui/Desktop/库里泡/item/student/src/utils/request.js"],"names":["axios","message","request","createAxiosInstance","instance","create","baseURL","timeout","headers","post","interceptors","use","config","loading","open","token","Authorization","cleanObject","response","close","res","data","validateStatus","test","code","error","msg","warning","Promise","reject","status","removeStorageToken","setTimeout","window","location","href","navigator","onLine"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA,OAAO,MAAMC,OAAO,GAAGC,mBAAmB,EAAnC;;AAEP,SAASA,mBAAT,GAA+B;AAC3B,QAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAN,CAAa;AAC1BC,IAAAA,OAAO,EAAE,4BADiB;AAE1BC,IAAAA,OAAO,EAAE,IAFiB;AAG1BC,IAAAA,OAAO,EAAE;AACL;AACAC,MAAAA,IAAI,EAAE;AACF,wBAAgB;AADd;AAFD;AAHiB,GAAb,CAAjB,CAD2B,CAW3B;;AACAL,EAAAA,QAAQ,CAACM,YAAT,CAAsBR,OAAtB,CAA8BS,GAA9B,CAAmCC,MAAD,IAAY;AAC1C;AACAC,IAAAA,OAAO,CAACC,IAAR,GAF0C,CAG1C;;AACAC,IAAAA,KAAK,KAAKH,MAAM,CAACJ,OAAP,CAAeQ,aAAf,GAA+BD,KAApC,CAAL,CAJ0C,CAK1C;;AACAE,IAAAA,WAAW;AACX,WAAOL,MAAP;AACH,GARD,EAZ2B,CAqB3B;;AACAR,EAAAA,QAAQ,CAACM,YAAT,CAAsBQ,QAAtB,CAA+BP,GAA/B,CAAoCO,QAAD,IAAc;AAC7C;AACAL,IAAAA,OAAO,CAACM,KAAR,GAF6C,CAG7C;;AACA,UAAMC,GAAG,GAAGF,QAAQ,CAACG,IAArB,CAJ6C,CAK7C;;AACA,UAAMC,cAAc,GAAG,cAAvB,CAN6C,CAMP;;AACtC,QAAIA,cAAc,CAACC,IAAf,CAAoBH,GAAG,CAACI,IAAxB,CAAJ,EAAmC;AAC/B,aAAOJ,GAAG,CAACC,IAAX;AACH,KAT4C,CAU7C;;;AACA,QAAID,GAAG,CAACI,IAAJ,KAAa,GAAjB,EAAsB;AAClBvB,MAAAA,OAAO,CAACwB,KAAR,CAAcL,GAAG,CAACM,GAAlB;AACH,KAFD,MAEO;AACHzB,MAAAA,OAAO,CAAC0B,OAAR,CAAgBP,GAAG,CAACM,GAApB;AACH;;AACD,WAAOE,OAAO,CAACC,MAAR,CAAeT,GAAf,CAAP;AACH,GAjBD,EAkBKK,KAAD,IAAW;AACPZ,IAAAA,OAAO,CAACM,KAAR,GADO,CACU;;AACjB,QAAIM,KAAK,CAACP,QAAN,CAAeY,MAAf,KAA0B,GAA9B,EAAmC;AAC/B7B,MAAAA,OAAO,CAACwB,KAAR,CAAc,gBAAd;AACAM,MAAAA,kBAAkB;AAClBC,MAAAA,UAAU,CAAC,MAAM;AACbC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB;AACH,OAFS,EAEP,IAFO,CAAV;AAGH,KAND,MAMO;AACH,UAAI,CAACF,MAAM,CAACG,SAAP,CAAiBC,MAAtB,EAA8B;AAC1BpC,QAAAA,OAAO,CAAC0B,OAAR,CAAgB,kBAAhB;AACH,OAFD,MAEO,IAAIF,KAAK,CAACD,IAAN,KAAe,cAAnB,EAAmC;AACtCvB,QAAAA,OAAO,CAAC0B,OAAR,CAAgB,MAAhB;AACH,OAFM,MAEA;AACH1B,QAAAA,OAAO,CAAC0B,OAAR,CAAgB,cAAhB;AACH;AACJ;;AACD,WAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP,CAjBO,CAiBsB;AAChC,GApCL;AAuCA,SAAOrB,QAAP;AACH","sourcesContent":["import axios from 'axios'\nimport { message } from 'antd'\n\nexport const request = createAxiosInstance()\n\nfunction createAxiosInstance() {\n    const instance = axios.create({\n        baseURL: \"http://82.156.102.187:8001\",\n        timeout: 5000,\n        headers: {\n            // 可定义统一的请求头部\n            post: {\n                'Content-Type': 'application/json'\n            }\n        }\n    })\n    // 添加请求拦截器(在发送请求之前做些什么)\n    instance.interceptors.request.use((config) => {\n        //可添加开启loading效果的函数\n        loading.open()\n        //token 存在就添加到请求头里\n        token && (config.headers.Authorization = token)\n        // 过滤请求参数中的 null undefined ''的函数\n        cleanObject()\n        return config\n    })\n    // 添加响应拦截器(对响应数据做点什么)\n    instance.interceptors.response.use((response) => {\n        //可添加关闭loading效果的函数\n        loading.close()\n        //解构出返回结果的数据\n        const res = response.data\n        //对自定义code码进行判断,将成功的数据返回出去\n        const validateStatus = /^(2|3)\\d{2}$/ //code为2或3开头的视作请求成功\n        if (validateStatus.test(res.code)) {\n            return res.data\n        }\n        //判断失败的code码并作出提示等操作\n        if (res.code === 401) {\n            message.error(res.msg)\n        } else {\n            message.warning(res.msg)\n        }\n        return Promise.reject(res)\n    },\n        (error) => {\n            loading.close()  //可添加关闭loading效果的函数\n            if (error.response.status === 401) {\n                message.error('token失效，请重新登录！')\n                removeStorageToken()\n                setTimeout(() => {\n                    window.location.href = '/login'\n                }, 2000)\n            } else {\n                if (!window.navigator.onLine) {\n                    message.warning('网络异常，请检查网络是否正常连接')\n                } else if (error.code === 'ECONNABORTED') {\n                    message.warning('请求超时')\n                } else {\n                    message.warning('服务器异常，请联系管理员')\n                }\n            }\n            return Promise.reject(error) // 将错误继续返回给到具体页面\n        }\n    )\n\n    return instance\n}\n"]},"metadata":{},"sourceType":"module"}