{"ast":null,"code":"import axios from 'axios';\naxios.interceptors.request.use(config => {\n  if (config.url === \"/login/\") {\n    localStorage.clear();\n  } else {\n    const token = `JWT ${localStorage.getItem(\"token\")}`;\n    config.headers.Authorization = token;\n  }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\naxios.interceptors.response.use(response => {\n  return response;\n}, error => {\n  return Promise.resolve(error.response);\n});\n\nfunction checkStatus(response) {\n  // loading\n  // 如果http状态码正常，则直接返回数据\n  if (response && (response.status === 200 || response.status === 304 || response.status === 400)) {\n    return response; // 如果不需要除了data之外的数据，可以直接 return response.data\n  } // 异常状态下，把错误信息返回去\n\n\n  return {\n    status: -404,\n    msg: '网络异常'\n  };\n}\n\nfunction checkCode(res) {\n  // 如果code异常(这里已经包括网络错误，服务器错误，后端抛出的错误)，可以弹出一个错误提示，告诉用户\n  if (res.status === -404) {// alert(res.msg)\n  }\n\n  if (res.data && !res.data.success) {// alert(res.data.error_msg)\n  }\n\n  return res;\n}\n\nexport default {\n  post(url, data) {\n    return axios({\n      method: 'post',\n      baseURL: \"http://82.156.102.187:8001\",\n      url,\n      data: JSON.stringify(data),\n      timeout: 10000,\n      headers: {\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      return checkStatus(response);\n    }).then(res => {\n      return checkCode(res);\n    });\n  },\n\n  get(url, params) {\n    return axios({\n      method: 'get',\n      baseURL: 'http://82.156.102.187:8001',\n      url,\n      params,\n      // get 请求时带的参数\n      timeout: 10000,\n      headers: {\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n    }).then(response => {\n      return checkStatus(response);\n    }).then(res => {\n      return checkCode(res);\n    });\n  },\n\n  patch(url, data) {\n    return axios({\n      method: 'patch',\n      baseURL: 'http://82.156.102.187:8001',\n      url,\n      data,\n      timeout: 10000\n    }).then(response => {\n      return checkStatus(response);\n    }).then(res => {\n      return checkCode(res);\n    });\n  }\n\n};","map":{"version":3,"sources":["/Users/wuliangrui/Desktop/库里泡/item/student/src/utils/request.js"],"names":["axios","interceptors","request","use","config","url","localStorage","clear","token","getItem","headers","Authorization","error","Promise","reject","response","resolve","checkStatus","status","msg","checkCode","res","data","success","post","method","baseURL","JSON","stringify","timeout","then","get","params","patch"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEAA,KAAK,CAACC,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+BC,MAAM,IAAI;AACrC,MAAIA,MAAM,CAACC,GAAP,KAAe,SAAnB,EAA8B;AAC3BC,IAAAA,YAAY,CAACC,KAAb;AACF,GAFD,MAEO;AACH,UAAMC,KAAK,GAAI,OAAMF,YAAY,CAACG,OAAb,CAAqB,OAArB,CAA8B,EAAnD;AACAL,IAAAA,MAAM,CAACM,OAAP,CAAeC,aAAf,GAA+BH,KAA/B;AACH;;AACD,SAAOJ,MAAP;AACH,CARD,EAQGQ,KAAK,IAAI;AACR,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAVD;AAYAZ,KAAK,CAACC,YAAN,CAAmBc,QAAnB,CAA4BZ,GAA5B,CAAgCY,QAAQ,IAAI;AACxC,SAAOA,QAAP;AACH,CAFD,EAEGH,KAAK,IAAI;AACR,SAAOC,OAAO,CAACG,OAAR,CAAgBJ,KAAK,CAACG,QAAtB,CAAP;AACH,CAJD;;AAMA,SAASE,WAAT,CAAqBF,QAArB,EAA+B;AAC3B;AACA;AACA,MAAIA,QAAQ,KAAKA,QAAQ,CAACG,MAAT,KAAoB,GAApB,IAA2BH,QAAQ,CAACG,MAAT,KAAoB,GAA/C,IAAsDH,QAAQ,CAACG,MAAT,KAAoB,GAA/E,CAAZ,EAAiG;AAC7F,WAAOH,QAAP,CAD6F,CAE7F;AACH,GAN0B,CAO3B;;;AACA,SAAO;AACHG,IAAAA,MAAM,EAAE,CAAC,GADN;AAEHC,IAAAA,GAAG,EAAE;AAFF,GAAP;AAIH;;AAED,SAASC,SAAT,CAAmBC,GAAnB,EAAwB;AACpB;AACA,MAAIA,GAAG,CAACH,MAAJ,KAAe,CAAC,GAApB,EAAyB,CACrB;AACH;;AACD,MAAIG,GAAG,CAACC,IAAJ,IAAa,CAACD,GAAG,CAACC,IAAJ,CAASC,OAA3B,EAAqC,CACjC;AACH;;AACD,SAAOF,GAAP;AACH;;AAED,eAAe;AACXG,EAAAA,IAAI,CAACnB,GAAD,EAAMiB,IAAN,EAAY;AACZ,WAAOtB,KAAK,CAAC;AACTyB,MAAAA,MAAM,EAAE,MADC;AAETC,MAAAA,OAAO,EAAE,4BAFA;AAGTrB,MAAAA,GAHS;AAITiB,MAAAA,IAAI,EAAEK,IAAI,CAACC,SAAL,CAAeN,IAAf,CAJG;AAKTO,MAAAA,OAAO,EAAE,KALA;AAMTnB,MAAAA,OAAO,EAAE;AACL,4BAAoB,gBADf;AAEL,wBAAgB;AAFX;AANA,KAAD,CAAL,CAUJoB,IAVI,CAWFf,QAAD,IAAc;AACV,aAAOE,WAAW,CAACF,QAAD,CAAlB;AACH,KAbE,EAcLe,IAdK,CAeFT,GAAD,IAAS;AACL,aAAOD,SAAS,CAACC,GAAD,CAAhB;AACH,KAjBE,CAAP;AAmBH,GArBU;;AAsBXU,EAAAA,GAAG,CAAC1B,GAAD,EAAM2B,MAAN,EAAc;AACb,WAAOhC,KAAK,CAAC;AACTyB,MAAAA,MAAM,EAAE,KADC;AAETC,MAAAA,OAAO,EAAE,4BAFA;AAGTrB,MAAAA,GAHS;AAIT2B,MAAAA,MAJS;AAID;AACRH,MAAAA,OAAO,EAAE,KALA;AAMTnB,MAAAA,OAAO,EAAE;AACL,4BAAoB;AADf;AANA,KAAD,CAAL,CASJoB,IATI,CAUFf,QAAD,IAAc;AACV,aAAOE,WAAW,CAACF,QAAD,CAAlB;AACH,KAZE,EAaLe,IAbK,CAcFT,GAAD,IAAS;AACL,aAAOD,SAAS,CAACC,GAAD,CAAhB;AACH,KAhBE,CAAP;AAkBH,GAzCU;;AA0CXY,EAAAA,KAAK,CAAC5B,GAAD,EAAMiB,IAAN,EAAY;AACb,WAAOtB,KAAK,CAAC;AACTyB,MAAAA,MAAM,EAAE,OADC;AAETC,MAAAA,OAAO,EAAE,4BAFA;AAGTrB,MAAAA,GAHS;AAITiB,MAAAA,IAJS;AAKTO,MAAAA,OAAO,EAAE;AALA,KAAD,CAAL,CAMJC,IANI,CAOFf,QAAD,IAAc;AACV,aAAOE,WAAW,CAACF,QAAD,CAAlB;AACH,KATE,EAULe,IAVK,CAWFT,GAAD,IAAS;AACL,aAAOD,SAAS,CAACC,GAAD,CAAhB;AACH,KAbE,CAAP;AAeH;;AA1DU,CAAf","sourcesContent":["import axios from 'axios'\n\naxios.interceptors.request.use(config => {\n    if (config.url === \"/login/\") {\n       localStorage.clear();\n    } else {\n        const token = `JWT ${localStorage.getItem(\"token\")}`;\n        config.headers.Authorization = token;\n    }\n    return config\n}, error => {\n    return Promise.reject(error)\n})\n\naxios.interceptors.response.use(response => {\n    return response\n}, error => {\n    return Promise.resolve(error.response)\n})\n\nfunction checkStatus(response) {\n    // loading\n    // 如果http状态码正常，则直接返回数据\n    if (response && (response.status === 200 || response.status === 304 || response.status === 400)) {\n        return response\n        // 如果不需要除了data之外的数据，可以直接 return response.data\n    }\n    // 异常状态下，把错误信息返回去\n    return {\n        status: -404,\n        msg: '网络异常'\n    }\n}\n\nfunction checkCode(res) {\n    // 如果code异常(这里已经包括网络错误，服务器错误，后端抛出的错误)，可以弹出一个错误提示，告诉用户\n    if (res.status === -404) {\n        // alert(res.msg)\n    }\n    if (res.data && (!res.data.success)) {\n        // alert(res.data.error_msg)\n    }\n    return res\n}\n\nexport default {\n    post(url, data) {\n        return axios({\n            method: 'post',\n            baseURL: \"http://82.156.102.187:8001\",\n            url,\n            data: JSON.stringify(data),\n            timeout: 10000,\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest',\n                'Content-Type': 'application/json'\n            }\n        }).then(\n            (response) => {\n                return checkStatus(response)\n            }\n        ).then(\n            (res) => {\n                return checkCode(res)\n            }\n        )\n    },\n    get(url, params) {\n        return axios({\n            method: 'get',\n            baseURL: 'http://82.156.102.187:8001',\n            url,\n            params, // get 请求时带的参数\n            timeout: 10000,\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest'\n            }\n        }).then(\n            (response) => {\n                return checkStatus(response)\n            }\n        ).then(\n            (res) => {\n                return checkCode(res)\n            }\n        )\n    },\n    patch(url, data) {\n        return axios({\n            method: 'patch',\n            baseURL: 'http://82.156.102.187:8001',\n            url,\n            data,\n            timeout: 10000\n        }).then(\n            (response) => {\n                return checkStatus(response)\n            }\n        ).then(\n            (res) => {\n                return checkCode(res)\n            }\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}